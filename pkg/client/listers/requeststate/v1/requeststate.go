/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/dmartinol/crd-watcher/pkg/apis/requeststate/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RequestStateLister helps list RequestStates.
// All objects returned here must be treated as read-only.
type RequestStateLister interface {
	// List lists all RequestStates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RequestState, err error)
	// RequestStates returns an object that can list and get RequestStates.
	RequestStates(namespace string) RequestStateNamespaceLister
	RequestStateListerExpansion
}

// requestStateLister implements the RequestStateLister interface.
type requestStateLister struct {
	indexer cache.Indexer
}

// NewRequestStateLister returns a new RequestStateLister.
func NewRequestStateLister(indexer cache.Indexer) RequestStateLister {
	return &requestStateLister{indexer: indexer}
}

// List lists all RequestStates in the indexer.
func (s *requestStateLister) List(selector labels.Selector) (ret []*v1.RequestState, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RequestState))
	})
	return ret, err
}

// RequestStates returns an object that can list and get RequestStates.
func (s *requestStateLister) RequestStates(namespace string) RequestStateNamespaceLister {
	return requestStateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RequestStateNamespaceLister helps list and get RequestStates.
// All objects returned here must be treated as read-only.
type RequestStateNamespaceLister interface {
	// List lists all RequestStates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RequestState, err error)
	// Get retrieves the RequestState from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RequestState, error)
	RequestStateNamespaceListerExpansion
}

// requestStateNamespaceLister implements the RequestStateNamespaceLister
// interface.
type requestStateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RequestStates in the indexer for a given namespace.
func (s requestStateNamespaceLister) List(selector labels.Selector) (ret []*v1.RequestState, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RequestState))
	})
	return ret, err
}

// Get retrieves the RequestState from the indexer for a given namespace and name.
func (s requestStateNamespaceLister) Get(name string) (*v1.RequestState, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("requeststate"), name)
	}
	return obj.(*v1.RequestState), nil
}
